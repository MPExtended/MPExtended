#region Copyright (C) 2012 MPExtended
// Copyright (C) 2012 MPExtended Developers, http://mpextended.github.com/
// 
// MPExtended is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// MPExtended is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with MPExtended. If not, see <http://www.gnu.org/licenses/>.
#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using MPExtended.Libraries.Service;

namespace MPExtended.Applications.Development.DevTool.Tools
{
    internal class PSPluginInstallGenerator : IDevTool
    {
        public string Name { get { return "PowerScheduler install fragment generator"; } }
        public TextWriter OutputStream { get; set; }

        public void Run()
        {
            XNamespace ns = "http://schemas.microsoft.com/wix/2006/wi";
            XElement component = new XElement(ns + "Component", 
                new XAttribute("Id", "Component_Powerscheduler_Binaries"),
                new XAttribute("Guid", "fdc12c2e-fc3a-4a5f-bc8d-0996ff8a81b4"),
                new XElement(ns + "Condition", "HAS_TVE")
            );

            string path = Path.Combine(Installation.GetSourceRootDirectory(), "Applications", "MPExtended.Applications.PowerSchedulerPlugin", "bin", "Debug", "MPExtended.PowerScheduler.dll");
            if (File.Exists(path))
            {
                OutputStream.WriteLine("Writing PowerScheduler install fragment for monolithic plugin.");
                component.Add(new XElement(ns + "File", new XAttribute("Source", @"$(var.MPExtended.Applications.PowerSchedulerPlugin.TargetDir)\MPExtended.PowerScheduler.dll")));
                component.Add(new XElement(ns + "File", new XAttribute("Source", @"$(var.MPExtended.Applications.PowerSchedulerPlugin.TargetDir)\MPExtended.PowerScheduler.pdb")));
            }
            else
            {
                OutputStream.WriteLine("Writing PowerScheduler install fragment for library-based plugin (no ILMerge available).");
                component.Add(new XElement(ns + "File", new XAttribute("Source", @"$(var.MPExtended.Applications.PowerSchedulerPlugin.TargetDir)\MPExtended.Services.Common.Interfaces.dll"), new XAttribute("Id", "PS_Common")));
                component.Add(new XElement(ns + "File", new XAttribute("Source", @"$(var.MPExtended.Applications.PowerSchedulerPlugin.TargetDir)\MPExtended.Services.MetaService.Interfaces.dll"), new XAttribute("Id", "PS_MetaService")));
                component.Add(new XElement(ns + "File", new XAttribute("Source", @"$(var.MPExtended.Applications.PowerSchedulerPlugin.TargetDir)\MPExtended.Applications.PowerSchedulerPlugin.dll")));
                component.Add(new XElement(ns + "File", new XAttribute("Source", @"$(var.MPExtended.Applications.PowerSchedulerPlugin.TargetDir)\MPExtended.Applications.PowerSchedulerPlugin.pdb")));
            }

            XDocument doc = new XDocument(
                new XDeclaration("1.0", "utf-8", ""),
                new XElement(ns + "Wix",
                    new XAttribute("xmlns", ns.NamespaceName),
                    new XComment(String.Format("Autogenerated at {0}", DateTime.Now.ToString("dd MMM yyy HH:mm", System.Globalization.CultureInfo.InvariantCulture))),
                    new XElement(ns + "Fragment",
                        new XElement(ns + "DirectoryRef", new XAttribute("Id", "TVEPlugins"), component)
                    )
                )
            );
            doc.Save(Path.Combine(Installation.GetSourceRootDirectory(), "Installers", "MPExtended.Installers.Service", "Generated.wxs"));
        }
    }
}
