@model StatusViewModel
@{
    ViewBag.Title = UIStrings.TVServerStatus;
    Html.jQuery().Enable();
}

@if (Model.HasTAS)
{
    <h2>@UIStrings.Cards</h2>
    <table class="webmp">
        <tr>
            <th>@UIStrings.Card</th>
            <th>@UIStrings.CardName</th>
            <th>@UIStrings.CardState</th>
            <th>@UIStrings.CardGrabbingEPG</th>
            <th>@UIStrings.Channel</th>
            <th>@UIStrings.CardScrambled</th>
            <th>@UIStrings.Username</th>
            <th colspan="2">&nbsp;</th>
        </tr>

        @foreach (var card in Model.Cards)
        {
            <tr>
                <td>@card.CardId</td>
                <td>@card.Name</td>
                <td>@card.State</td>
                <td>@(card.GrabbingEPG ? UIStrings.Yes : UIStrings.No)</td>
                <td>@card.ChannelName</td>
                @if (card.IsActive)
                {
                    <td>@(card.Scrambled ? UIStrings.Yes : UIStrings.No)</td>
                    <td>@card.Username</td>
                    <td>@(!card.VirtualCard.IsRecording ? Html.ActionLink(UIStrings.Stop, "Stop", new { user = card.Username }) : MvcHtmlString.Empty)</td>
                    <td>@Html.ActionLink(UIStrings.Details, "Details", new { user = card.Username })</td>
                }
                else
                {
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                }
            </tr>
        }
    </table>
    <br />
}
    
<h2>@UIStrings.DiskInformation</h2>
<table class="webmp">
    <tr>
        <th>@UIStrings.DiskInfoDisk</th>
        <th>@UIStrings.DiskInfoUsed</th>
        <th>@UIStrings.DiskInfoSize</th>
        <th>@UIStrings.DiskInfoAvailable</th>
    </tr>

    @foreach (var disk in Model.DiskInformation.OrderBy(x => x.Disk))
    {
        <tr>
            <td>@disk.Disk</td>
            <td>@Math.Round(disk.Used, 1) GB</td>
            <td>@Math.Round(disk.Size, 1) GB</td>
            <td>
                @if((disk.Size > 500 && disk.PercentageUsed > 95) || (disk.Size <= 500 && disk.PercentageUsed > 90))
                {
                    <span style="color: Red;">@Math.Round(100 - @disk.PercentageUsed)%</span>
                } else {
                    @Math.Round(100 - @disk.PercentageUsed)<text>%</text>
                }
            </td>
        </tr>
    }
</table>
<br />

<h2>@UIStrings.SystemStatus</h2>
<ul>
    <li>@UIStrings.CurrentCPUUsage <span id="cpuUsage">0</span>%</li>
    <li>@UIStrings.CurrentMemoryUsage <span id="memoryUsage">0</span>MB / @Model.TotalMemoryMegaBytes MB</li>
</ul>

<script type="text/javascript">
$(function () {
    var updateCounters = function (url) {
        $.ajax({ // cannot use $.getJSON() here because it doesn't support setting cache to false
            url: '@Url.Action("GetPerformanceCounters", "Status")',
            dataType: "json",
            cache: false,
            success: function (result) {
                if (!('Error' in result)) {
                    $("#cpuUsage").html(Math.round(result.CPU));
                    $("#memoryUsage").html(Math.round(result.Memory));
                }
            }
        });
    };
    setInterval(updateCounters, 5000);
    updateCounters();
});
</script>